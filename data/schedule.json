[{
	"day": "1",
	"date":"Oct. 10th, Thursday",
	"mainStage": [
		{
			"time":"9:00 - 10:00",
			"title":"Doors open & Breakfast",
			"isBreak": true
		},
		{
			"time": "10:00 - 10:30",
			"speakers": ["jon-gjengset"],
			"title": "TBA",
			"description": ""
		},
		{
			"time": "10:45 - 11:15",
			"speakers": ["predrag-gruevski"],
			"title": "Build bigger in less time: code testing beyond the basics",
			"description": "<p>An <code>async fn</code> that you write goes through different compiler stages, from Editor -> AST -> HIR -> MIR -> Executable. This process is complex and changing all the time. My contribution to this was removing the <code>GenFuture</code> type, which used to be an implementation detail of async Rust. I will give a deep dive into what this was, why it had to go, and the struggles from a contributor perspective in making it go away. A journey through different workarounds that existed temporarily, and are still existing today.</p><p>Apart from this, I will also highlight some very common problems that developers may run into when developing async Rust. Why the difference between <code>async fn</code> and <code>fn -> impl Future</code> matters a lot. Why the <code>mem::size_of</code> of Futures is currently a great concern, how to work around that, as well as an outlook on the Future (pun intended) when the compiler will improve and make manual workarounds unnecessary.</p>"
		},
		{
			"time": "11:30 - 12:00",
			"speakers": ["sam-van-overmeire"],
			"title": "A gentle introduction to procedural macros",
			"description":"<p>Sometimes itâ€™s nice to channel our inner Monica Geller and keep everything neat in our codebase. Itâ€™s zen coding when you do some spring cleaning, and itâ€™s good for your team when things are clear and expressive. So you brush up on your tests (or maybe you donâ€™t) and start with some recreational refactoring in Rust.</p><p>But suddenly, all your textbook refactoring techniques fail! You move code around, extract methods or change coupling, and the borrow checker tells you that everything you want to access has already been used somewhere else. Sorry, Mario, but the Princess is in another castle!</p><p>In this talk, we will see how we can refactor with ownership in mind. We will learn more about the differences as well as commonalities of pointer types, we will look at how references work when being used in a struct, and we will evaluate what techniques work best. Throughout, we will critically assess whether these changes are worthwhile or if cheating our way around with shortcuts is a better approach.</p>"
		},
		{
			"time": "12:00 - 13:30",
			"title": "Lunch",
			"isBreak": true
		},
		{
			"time": "13:30 - 14:00",
			"speakers": ["attila-haraszti"],
			"title": "Practical Rust for Web Audio",
			"description": "<p>What if I told you there is a magical place where you can play videogames not just with a mouse+keyboard or gamepad but with, well, anything? Welcome to the alt.ctrl scene where anything can be used to control a videogame!</p><p>And what if I told you there is a magical programming language that supports you and your alt.ctrl game from hardware to GUI? Well, you're at a Rust conference so maybe you've guessed it.</p><p>In this talk we'll take a look at the many shapes of alt.ctrl games and how Rust is the perfect fit for creating them.</p>"
		},
		{
			"time": "14:15 - 14:45",
			"speakers": ["francois-mockers"],
			"title": "Augmented docs: a love letter to rustdoc and docs.rs",
			"description": "<p>Rust is a language thatâ€™s usually described as hard to learn, so letâ€™s shine some light on how people do learn it! Iâ€™ve been maintaining Rust learning materials for about 5 years, and through shepherding hundreds of community contributions, Iâ€™ve gleaned some interesting things about how people approach learning this language, which parts they find difficult, and what we as teachers (be it through learning materials, documentation or otherwise) can do better. Join me in this journey through a less-talked about facet of the project!</p>"
		},
		{
			"time": "15:00 - 15:30",
			"speakers": ["arthur-pastel"],
			"title": "The Impact of Memory Allocators on Performance: A Deep Dive",
			"description":"<p>Cargo makes it easy to publish a crate, but thereâ€™s a lot of work to be done between <code>cargo new and cargo publish</code>. This talk will cover the many ways to take a crate from good to great.</p>"
		},
		{
			"time": "15:30 - 16:00",
			"title": "Snack Break",
			"isBreak": true
		},
		{
			"time": "16:00 - 16:30",
			"speakers": ["victor-ciura"],
			"title": "Unleashing ðŸ¦€ The Ferris Within",
			"description": "<p>Apply machine learning to help foresee, find and fix heisenbugs. More realistic than Fuzz testing, more comprehensive than property based testing, reinforcement learning can find more bugs than you thought possible.</p>"
		},
		{
			"time": "16:45 - 17:15",
			"speakers": ["niklas-korz"],
			"title": "Runtime Scripting for Rust Applications",
			"description":"<p>Authorization is the number one security risk in the OWASP Top 10. But does it have to be? In this talk weâ€™ll explore application security, unstable rust, and typestates to address one of the most prevalent vulnerability classes in modern software.</p>"
		},
		{
			"time": "17:30 - 18:00",
			"title": "TBA",
			"speakers": ["aida-getoeva"],
			"description":"<p>We talk to people that are actively involved with building Rust about their work. What are the inner workings of the project? What's coming in the 2024 edition? <a href=\"/speakers/luca-palmieri/\">Luca Palmieri</a> will talk about those and other questions with our panelists.</p>"
		}
	],
  "side": [
		{
			"time":"9:00 - 10:00",
			"title":"Doors open & Breakfast",
			"isBreak": true
		},
		{
			"time": "10:00 - 10:30",
			"speakers": [],
			"title": "TBA",
			"description": ""
		},
		{
			"time": "10:45 - 11:15",
			"speakers": [],
			"title": "TBA",
			"description": ""
		},
		{
			"time": "11:30 - 12:00",
			"speakers": [],
			"title": "TBA",
			"description":""
		},
		{
			"time": "12:00 - 13:30",
			"title": "Lunch",
			"isBreak": true
		},
		{
			"time": "13:30 - 14:00",
			"speakers": ["sasha-pourcelot"],
			"title": "Proving macro expansion with expandable",
			"description": ""
		},
		{
			"time": "14:15 - 14:45",
			"speakers": ["lukas-wirth"],
			"title": "Powerful Macros, Good IDE Support, No Headaches. Choose Two. ",
			"description": "<p>Rust is a language thatâ€™s usually described as hard to learn, so letâ€™s shine some light on how people do learn it! Iâ€™ve been maintaining Rust learning materials for about 5 years, and through shepherding hundreds of community contributions, Iâ€™ve gleaned some interesting things about how people approach learning this language, which parts they find difficult, and what we as teachers (be it through learning materials, documentation or otherwise) can do better. Join me in this journey through a less-talked about facet of the project!</p>"
		},
		{
			"time": "15:00 - 15:30",
			"speakers": ["bjorn-wieczoreck"],
			"title": "Generating ergonomic C++ APIs using Rustdoc, procedural macros, and Serde",
			"description":"<p>Cargo makes it easy to publish a crate, but thereâ€™s a lot of work to be done between <code>cargo new and cargo publish</code>. This talk will cover the many ways to take a crate from good to great.</p>"
		},
		{
			"time": "15:30 - 16:00",
			"title": "Snack Break",
			"isBreak": true
		},
		{
			"time": "16:00 - 16:30",
			"speakers": [],
			"title": "TBA",
			"description": "<p>Apply machine learning to help foresee, find and fix heisenbugs. More realistic than Fuzz testing, more comprehensive than property based testing, reinforcement learning can find more bugs than you thought possible.</p>"
		},
		{
			"time": "16:45 - 17:15",
			"speakers": [],
			"title": "TBA",
			"description":"<p>Authorization is the number one security risk in the OWASP Top 10. But does it have to be? In this talk weâ€™ll explore application security, unstable rust, and typestates to address one of the most prevalent vulnerability classes in modern software.</p>"
		},
		{
			"time": "17:30 - 18:00",
			"title": "TBA",
			"speakers": [],
			"description":"<p>We talk to people that are actively involved with building Rust about their work. What are the inner workings of the project? What's coming in the 2024 edition? <a href=\"/speakers/luca-palmieri/\">Luca Palmieri</a> will talk about those and other questions with our panelists.</p>"
		}
	]
},
{
	"day": "2",
	"date": "Oct. 11th, Friday",
  "mainStage": [
		{
			"time":"9:00 - 10:00",
			"title":"Doors open & Breakfast",
			"isBreak": true
		},
		{
			"time": "10:00 - 10:30",
			"speakers": [],
			"title": "",
			"description": ""
		},
		{
			"time": "10:45 - 11:15",
			"speakers": ["boxy-uwu"],
			"title": "Non-binary Rust: Between Safe and Unsafe",
			"description": "<p>An <code>async fn</code> that you write goes through different compiler stages, from Editor -> AST -> HIR -> MIR -> Executable. This process is complex and changing all the time. My contribution to this was removing the <code>GenFuture</code> type, which used to be an implementation detail of async Rust. I will give a deep dive into what this was, why it had to go, and the struggles from a contributor perspective in making it go away. A journey through different workarounds that existed temporarily, and are still existing today.</p><p>Apart from this, I will also highlight some very common problems that developers may run into when developing async Rust. Why the difference between <code>async fn</code> and <code>fn -> impl Future</code> matters a lot. Why the <code>mem::size_of</code> of Futures is currently a great concern, how to work around that, as well as an outlook on the Future (pun intended) when the compiler will improve and make manual workarounds unnecessary.</p>"
		},
		{
			"time": "11:30 - 12:00",
			"speakers": ["jonathan-pallant"],
			"title": "Writing a SD Card driver in Rust",
			"description":"<p>Sometimes itâ€™s nice to channel our inner Monica Geller and keep everything neat in our codebase. Itâ€™s zen coding when you do some spring cleaning, and itâ€™s good for your team when things are clear and expressive. So you brush up on your tests (or maybe you donâ€™t) and start with some recreational refactoring in Rust.</p><p>But suddenly, all your textbook refactoring techniques fail! You move code around, extract methods or change coupling, and the borrow checker tells you that everything you want to access has already been used somewhere else. Sorry, Mario, but the Princess is in another castle!</p><p>In this talk, we will see how we can refactor with ownership in mind. We will learn more about the differences as well as commonalities of pointer types, we will look at how references work when being used in a struct, and we will evaluate what techniques work best. Throughout, we will critically assess whether these changes are worthwhile or if cheating our way around with shortcuts is a better approach.</p>"
		},
		{
			"time": "12:00 - 13:30",
			"title": "Lunch",
			"isBreak": true
		},
		{
			"time": "13:30 - 14:00",
			"speakers": ["david-peherstorfer"],
			"title": "My Journey from WebDev to Medical Visualization Rustacea",
			"description": "<p>What if I told you there is a magical place where you can play videogames not just with a mouse+keyboard or gamepad but with, well, anything? Welcome to the alt.ctrl scene where anything can be used to control a videogame!</p><p>And what if I told you there is a magical programming language that supports you and your alt.ctrl game from hardware to GUI? Well, you're at a Rust conference so maybe you've guessed it.</p><p>In this talk we'll take a look at the many shapes of alt.ctrl games and how Rust is the perfect fit for creating them.</p>"
		},
		{
			"time": "14:15 - 14:45",
			"speakers": ["orhun-parmaksiz"],
			"title": "Renaissance of Terminal User Interfaces with Rust",
			"description": "<p>Rust is a language thatâ€™s usually described as hard to learn, so letâ€™s shine some light on how people do learn it! Iâ€™ve been maintaining Rust learning materials for about 5 years, and through shepherding hundreds of community contributions, Iâ€™ve gleaned some interesting things about how people approach learning this language, which parts they find difficult, and what we as teachers (be it through learning materials, documentation or otherwise) can do better. Join me in this journey through a less-talked about facet of the project!</p>"
		},
		{
			"time": "15:00 - 15:30",
			"speakers": ["adam-chalmers"],
			"title": "Code to contract to code: making ironclad APIs",
			"description":"<p>Cargo makes it easy to publish a crate, but thereâ€™s a lot of work to be done between <code>cargo new and cargo publish</code>. This talk will cover the many ways to take a crate from good to great.</p>"
		},
		{
			"time": "15:30 - 16:00",
			"title": "Snack Break",
			"isBreak": true
		},
		{
			"time": "16:00 - 16:30",
			"speakers": ["scott-chacon"],
			"title": "TBA",
			"description": "<p>Apply machine learning to help foresee, find and fix heisenbugs. More realistic than Fuzz testing, more comprehensive than property based testing, reinforcement learning can find more bugs than you thought possible.</p>"
		},
		{
			"time": "16:45 - 17:15",
			"speakers": ["samuel-moelius"],
			"title": "Linting with Dylint",
			"description":"<p>Authorization is the number one security risk in the OWASP Top 10. But does it have to be? In this talk weâ€™ll explore application security, unstable rust, and typestates to address one of the most prevalent vulnerability classes in modern software.</p>"
		},
		{
			"time": "17:30 - 18:00",
			"title": "TBA",
			"speakers": ["charlie-marsh"],
			"description":"<p>We talk to people that are actively involved with building Rust about their work. What are the inner workings of the project? What's coming in the 2024 edition? <a href=\"/speakers/luca-palmieri/\">Luca Palmieri</a> will talk about those and other questions with our panelists.</p>"
		}
	],
  "side": [
		{
			"time":"9:00 - 10:00",
			"title":"Doors open & Breakfast",
			"isBreak": true
		},
		{
			"time": "10:00 - 10:30",
			"speakers": [],
			"title": "TBA",
			"description": ""
		},
		{
			"time": "10:45 - 11:15",
			"speakers": [],
			"title": "TBA",
			"description": ""
		},
		{
			"time": "11:30 - 12:00",
			"speakers": [],
			"title": "TBA",
			"description":""
		},
		{
			"time": "12:00 - 13:30",
			"title": "Lunch",
			"isBreak": true
		},
		{
			"time": "13:30 - 14:00",
			"speakers": ["vitaly-bragilevsky"],
			"title": "I/O in Rust: the whole story",
			"description": ""
		},
		{
			"time": "14:15 - 14:45",
			"speakers": ["nikita-lapkov"],
			"title": "Fast and efficient network protocols in Rust",
			"description": ""
		},
		{
			"time": "15:00 - 15:30",
			"speakers": ["matthias-heiden"],
			"title": "Windows Kernel Programming with Rust ",
			"description":"<p>Cargo makes it easy to publish a crate, but thereâ€™s a lot of work to be done between <code>cargo new and cargo publish</code>. This talk will cover the many ways to take a crate from good to great.</p>"
		},
		{
			"time": "15:30 - 16:00",
			"title": "Snack Break",
			"isBreak": true
		},
		{
			"time": "16:00 - 16:30",
			"speakers": [],
			"title": "TBA",
			"description": "<p>Apply machine learning to help foresee, find and fix heisenbugs. More realistic than Fuzz testing, more comprehensive than property based testing, reinforcement learning can find more bugs than you thought possible.</p>"
		},
		{
			"time": "16:45 - 17:15",
			"speakers": [],
			"title": "TBA",
			"description":"<p>Authorization is the number one security risk in the OWASP Top 10. But does it have to be? In this talk weâ€™ll explore application security, unstable rust, and typestates to address one of the most prevalent vulnerability classes in modern software.</p>"
		},
		{
			"time": "17:30 - 18:00",
			"title": "TBA",
			"speakers": [],
			"description":"<p>We talk to people that are actively involved with building Rust about their work. What are the inner workings of the project? What's coming in the 2024 edition? <a href=\"/speakers/luca-palmieri/\">Luca Palmieri</a> will talk about those and other questions with our panelists.</p>"
		}
	]
}]
